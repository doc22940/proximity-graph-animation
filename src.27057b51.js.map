{"version":3,"sources":["lib/constants.ts","lib/utils.ts","lib/point.ts","lib/simulator.ts","index.ts"],"names":[],"mappings":"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","file":"src.27057b51.js","sourceRoot":"../src","sourcesContent":["export const FPS = 60;\nexport const DENSITY = 0.6;\nexport const MAX_SPEED = 0.15;\nexport const MIN_RADIUS = 1;\nexport const MAX_RADIUS = 1;\nexport const CONNECT_DISTANCE = 100;\n","export const getRandomInRange = (min: number, max: number) => {\n  return Math.random() * (max - min) + min;\n};\n","import { getRandomInRange } from \"./utils\";\nimport { MAX_SPEED, MAX_RADIUS, MIN_RADIUS } from \"./constants\";\n\nexport class Point {\n  constructor(\n    public x: number,\n    public y: number,\n    private vx: number,\n    private vy: number,\n    public radius: number,\n    public color: string\n  ) {}\n\n  public move = (delta: number) => {\n    this.x += this.vx * delta;\n    this.y += this.vy * delta;\n  };\n\n  public distance = (other: Point) => {\n    return Math.sqrt((other.x - this.x) ** 2 + (other.y - this.y) ** 2);\n  };\n\n  public static create(w: number, h: number) {\n    return new Point(\n      getRandomInRange(0, w),\n      getRandomInRange(0, h),\n      getRandomInRange(-MAX_SPEED, MAX_SPEED),\n      getRandomInRange(-MAX_SPEED, MAX_SPEED),\n      getRandomInRange(MIN_RADIUS, MAX_RADIUS),\n      \"white\"\n    );\n  }\n}\n","import { CONNECT_DISTANCE, DENSITY, FPS } from \"./constants\";\nimport { Point } from \"./point\";\n\nconst TIME_PER_FRAME = 1000 / FPS;\n\nexport class Simulator {\n  private population: number;\n  private points: Point[] = [];\n  private last: number;\n\n  constructor(private canvas: HTMLCanvasElement, { density = DENSITY } = {}) {\n    this.population =\n      (this.canvas.width * this.canvas.height) / (5000 / density);\n  }\n\n  private getContext() {\n    return this.canvas.getContext(\"2d\");\n  }\n\n  public start = () => {\n    window.requestAnimationFrame(this.loop);\n  };\n\n  private loop = timestamp => {\n    const delta = !this.last ? 1 : (timestamp - this.last) / TIME_PER_FRAME;\n\n    for (let i = this.points.length; i < this.population; i++) {\n      this.points.push(Point.create(this.canvas.width, this.canvas.height));\n    }\n\n    const ctx = this.getContext();\n\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.drawBackground();\n\n    this.points.forEach(point => {\n      point.move(delta);\n\n      if (point.x < -CONNECT_DISTANCE) {\n        point.x = this.canvas.width + CONNECT_DISTANCE;\n      } else if (point.x > this.canvas.width + CONNECT_DISTANCE) {\n        point.x = -CONNECT_DISTANCE;\n      }\n\n      if (point.y < -CONNECT_DISTANCE) {\n        point.y = this.canvas.height + CONNECT_DISTANCE;\n      } else if (point.y > this.canvas.height + CONNECT_DISTANCE) {\n        point.y = -CONNECT_DISTANCE;\n      }\n    });\n\n    const connections = new Map<Point, Set<Point>>();\n    this.points.forEach(point => {\n      this.processConnections(point, connections);\n    });\n\n    connections.forEach((others, point) => {\n      others.forEach(other => {\n        this.drawConnection(point, other);\n      });\n    });\n\n    this.points.forEach(point => {\n      this.drawPoint(point);\n    });\n\n    this.last = timestamp;\n\n    window.requestAnimationFrame(this.loop);\n  };\n\n  private drawBackground() {\n    const ctx = this.getContext();\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawPoint(point: Point) {\n    const ctx = this.getContext();\n    ctx.fillStyle = point.color;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n    ctx.fill();\n  }\n\n  private processConnections(\n    point: Point,\n    connections: Map<Point, Set<Point>>\n  ) {\n    connections.set(point, new Set());\n\n    for (let other of this.points) {\n      if (point === other || connections.get(other)?.has(point)) {\n        continue;\n      }\n\n      const cwr = point.x + CONNECT_DISTANCE;\n      const cwl = point.x - CONNECT_DISTANCE;\n      const cht = point.y - CONNECT_DISTANCE;\n      const chb = point.y + CONNECT_DISTANCE;\n\n      if (\n        (cwr < this.canvas.width && other.x > cwr) ||\n        (cwl >= 0 && other.x < cwl) ||\n        (cht >= 0 && other.y < cht) ||\n        (chb < this.canvas.height && other.y > chb)\n      ) {\n        continue;\n      }\n\n      const distance = point.distance(other);\n      if (distance < CONNECT_DISTANCE) {\n        connections.get(point).add(other);\n      }\n    }\n  }\n\n  private drawConnection(point: Point, other: Point) {\n    const ctx = this.getContext();\n    const distance = point.distance(other);\n\n    ctx.beginPath();\n\n    ctx.moveTo(point.x, point.y);\n    ctx.lineTo(other.x, other.y);\n\n    ctx.strokeStyle = `rgba(255, 255, 255, ${Math.abs(\n      distance / CONNECT_DISTANCE - 1\n    )})`;\n    ctx.stroke();\n  }\n}\n","import { getRandomInRange } from \"./lib/utils\";\nimport { FPS } from \"./lib/constants\";\nimport { Simulator } from \"./lib/simulator\";\n\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nconst simulator = new Simulator(canvas);\nsimulator.start();\n"]}